package nl.amis.gbugen.file;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.Writer;
import java.util.Date;
import nl.amis.gbugen.db.DesignerObject;
import nl.amis.gbugen.db.ObjectType;
import nl.amis.gbugen.db.TriggerDao;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * DropTrigger generator, generates the Drop trigger SQL script.
 * 
 * @author preitsma
 */
public class DropTriggerScriptGenerator extends FileGenerator {   

    @Override
    protected String getGenType() {
        return "drop-triggers";
    }
    private Logger log = LoggerFactory.getLogger(DropTriggerScriptGenerator.class);
    private Writer output = null;

    @Override
    public void generate() {

        log.info("---- start generating drop-triggers sql script  ----");

        try {
            openFile();

            output.write("/* Script that drops Table API for tables and views that are altered   \n");
            output.write(" * in subsequent DDL generation.                                       \n");
            output.write(" *\n");
            output.write(" * This is necessary to assure an uninterrupted run of dwzrun61.exe    \n");
            output.write(" * DDL generation. Table API will be re-generated afterwards.          \n");
            output.write(" *\n");
            output.write(" * Generated by GBU-generator, Woningnet Designer Tools.               \n");
            output.write(" * date: " + new Date().toString() + "\n");
            output.write(" *                                                                    \n");
            output.write(" */\n\n");

            TriggerDao triggerDao = new TriggerDao(props.targetDbUrl,props.targetDbUsername,props.targetDbPassword);
         
            log.info("looping through tables...");
            for (DesignerObject tableObject : workArea.getObjectsOfType(ObjectType.TABLE_DEFINITION)) {
                log.info(".table " + tableObject.getName());
                output.write("PROMPT Dropping Table API Package Specification for Table '" + tableObject.getName() + "' (altered in " + tableObject.getConfiguration() + ")\n");                  
                for (String triggerName : triggerDao.queryTriggersForTable(tableObject.getName())) {
                    log.info("..trigger: " + triggerName);
                    output.write(generateDropStatement(triggerName));
                }
            }

            output.write("-- end of script \n");


        } catch (IOException ioe) {
            log.error("error ocurrend writing the drop triggers file", ioe);
        } finally {
            closeFile();
        }

        log.info("---- finished writing to drop-triggers sql file ----\n");
    }

    private static String generateDropStatement(String triggerName) {
        final String dropStatement =
                "DROP TRIGGER #trigger;\n\n";
        return dropStatement.replace("#trigger", triggerName);
    }

    @Override
    protected void closeFile() {
        if (output != null) {
            log.info("closing file ...");
            try {
                output.close();
            } catch (Exception ignore) {
            }
        }
    }

    @Override
    protected void openFile() throws IOException {
        String completeFileName = createFileNamePlusDir(getGenType()) + ".sql";
        File file = new File(completeFileName);
        output = new BufferedWriter(new FileWriter(file));
        log.info("created new file: '" + completeFileName + "'");
    }
}
